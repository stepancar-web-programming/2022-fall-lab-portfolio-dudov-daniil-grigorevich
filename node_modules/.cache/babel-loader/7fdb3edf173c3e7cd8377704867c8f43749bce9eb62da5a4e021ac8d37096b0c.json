{"ast":null,"code":"var _jsxFileName = \"/home/shket/projects/javascript/shket-dev/src/pages/ReleasePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { slides } from \"../consts\";\nimport classes from \"../styles/ReleasePage.module.css\";\nimport { mod } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ReleasePage() {\n  _s();\n  const [slideIndex, setSlideIndex] = useState(2);\n  function getSlideStyles(index) {\n    if (index < slideIndex) return {\n      left: \"-100%\"\n    };else if (index === slideIndex) return {\n      left: 0\n    };else return {\n      left: \"100%\"\n    };\n  }\n  function getIndicatorClasses(index) {\n    return index === slideIndex ? classes.active : null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Releases\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.baseContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.slider,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: [styles.arrow, styles.left].join(\" \"),\n          onClick: () => setSlideIndex(mod(slideIndex - 1, slides.length)),\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.slideSet,\n          children: slides.map((_ref, index) => {\n            let {\n              name,\n              image,\n              description\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: getSlideStyles(index),\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: image\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 17\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSlideIndex(mod(slideIndex + 1, slides.length)),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.indicators,\n        children: slides.map((_ref2, index) => {\n          let {} = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: getIndicatorClasses(index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_s(ReleasePage, \"kcd8Pc6GqlfsmlczQ8du2SA4Uo4=\");\n_c = ReleasePage;\nvar _c;\n$RefreshReg$(_c, \"ReleasePage\");","map":{"version":3,"names":["React","useState","slides","classes","mod","ReleasePage","slideIndex","setSlideIndex","getSlideStyles","index","left","getIndicatorClasses","active","baseContainer","slider","styles","arrow","join","length","slideSet","map","name","image","description","indicators"],"sources":["/home/shket/projects/javascript/shket-dev/src/pages/ReleasePage.jsx"],"sourcesContent":["import React, {useState} from \"react\"\nimport {slides} from \"../consts\"\nimport classes from \"../styles/ReleasePage.module.css\"\nimport {mod} from \"../utils\"\n\nexport default function ReleasePage() {\n  const [slideIndex, setSlideIndex] = useState(2)\n\n  function getSlideStyles(index) {\n    if (index < slideIndex) return {left: \"-100%\"}\n    else if (index === slideIndex) return {left: 0}\n    else return {left: \"100%\"}\n  }\n\n  function getIndicatorClasses(index) {\n    return index === slideIndex ? classes.active : null\n  }\n\n  return (\n    <main>\n      <h1>Releases</h1>\n      <div className={classes.baseContainer}>\n        <div className={classes.slider}>\n          <div className={[styles.arrow, styles.left].join(\" \")} onClick={() => setSlideIndex(mod(slideIndex - 1, slides.length))}> </div>\n          <div className={classes.slideSet}>\n            {slides.map(({name, image, description}, index) => (\n              <div key={index} style={getSlideStyles(index)}>\n                <h3>{name}</h3>\n                <img src={image} />\n                <p>{description}</p>\n              </div>\n            ))}\n          </div>\n          <button onClick={() => setSlideIndex(mod(slideIndex + 1, slides.length))}>Next</button>\n        </div>\n        <div className={classes.indicators}>\n          {slides.map(({}, index) => (\n            <div key={index} className={getIndicatorClasses(index)}></div>\n          ))}\n        </div>\n      </div>\n    </main>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAAQC,MAAM,QAAO,WAAW;AAChC,OAAOC,OAAO,MAAM,kCAAkC;AACtD,SAAQC,GAAG,QAAO,UAAU;AAAA;AAE5B,eAAe,SAASC,WAAW,GAAG;EAAA;EACpC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAE/C,SAASO,cAAc,CAACC,KAAK,EAAE;IAC7B,IAAIA,KAAK,GAAGH,UAAU,EAAE,OAAO;MAACI,IAAI,EAAE;IAAO,CAAC,MACzC,IAAID,KAAK,KAAKH,UAAU,EAAE,OAAO;MAACI,IAAI,EAAE;IAAC,CAAC,MAC1C,OAAO;MAACA,IAAI,EAAE;IAAM,CAAC;EAC5B;EAEA,SAASC,mBAAmB,CAACF,KAAK,EAAE;IAClC,OAAOA,KAAK,KAAKH,UAAU,GAAGH,OAAO,CAACS,MAAM,GAAG,IAAI;EACrD;EAEA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB,eACjB;MAAK,SAAS,EAAET,OAAO,CAACU,aAAc;MAAA,wBACpC;QAAK,SAAS,EAAEV,OAAO,CAACW,MAAO;QAAA,wBAC7B;UAAK,SAAS,EAAE,CAACC,MAAM,CAACC,KAAK,EAAED,MAAM,CAACL,IAAI,CAAC,CAACO,IAAI,CAAC,GAAG,CAAE;UAAC,OAAO,EAAE,MAAMV,aAAa,CAACH,GAAG,CAACE,UAAU,GAAG,CAAC,EAAEJ,MAAM,CAACgB,MAAM,CAAC,CAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAQ,eAChI;UAAK,SAAS,EAAEf,OAAO,CAACgB,QAAS;UAAA,UAC9BjB,MAAM,CAACkB,GAAG,CAAC,OAA6BX,KAAK;YAAA,IAAjC;cAACY,IAAI;cAAEC,KAAK;cAAEC;YAAW,CAAC;YAAA,oBACrC;cAAiB,KAAK,EAAEf,cAAc,CAACC,KAAK,CAAE;cAAA,wBAC5C;gBAAA,UAAKY;cAAI;gBAAA;gBAAA;gBAAA;cAAA,QAAM,eACf;gBAAK,GAAG,EAAEC;cAAM;gBAAA;gBAAA;gBAAA;cAAA,QAAG,eACnB;gBAAA,UAAIC;cAAW;gBAAA;gBAAA;gBAAA;cAAA,QAAK;YAAA,GAHZd,KAAK;cAAA;cAAA;cAAA;YAAA,QAIT;UAAA,CACP;QAAC;UAAA;UAAA;UAAA;QAAA,QACE,eACN;UAAQ,OAAO,EAAE,MAAMF,aAAa,CAACH,GAAG,CAACE,UAAU,GAAG,CAAC,EAAEJ,MAAM,CAACgB,MAAM,CAAC,CAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAc;MAAA;QAAA;QAAA;QAAA;MAAA,QACnF,eACN;QAAK,SAAS,EAAEf,OAAO,CAACqB,UAAW;QAAA,UAChCtB,MAAM,CAACkB,GAAG,CAAC,QAAKX,KAAK;UAAA,IAAT,CAAC,CAAC;UAAA,oBACb;YAAiB,SAAS,EAAEE,mBAAmB,CAACF,KAAK;UAAE,GAA7CA,KAAK;YAAA;YAAA;YAAA;UAAA,QAA+C;QAAA,CAC/D;MAAC;QAAA;QAAA;QAAA;MAAA,QACE;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEX;AAAC,GAtCuBJ,WAAW;AAAA,KAAXA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}